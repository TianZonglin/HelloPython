- 0 ------------------------------------------------------------
原生爬虫·Scripy·但是要懂原理
Pythonic·代码风格·要简洁明了
变量交换:   x, y = y ,x
易于学习
Python能做什么?
·爬虫·
·大数据·
·测试·
·AI·
·WEB·
·脚本处理·
Python之禅：简洁胜于复杂，做之前要多想
用编程解决生活中的问题

细致与进阶
语言本质，打好基础

- 1 ------------------------------------------------------------
1.是一门编程语言，不是框架(djangle..)，不是类库(Util..)
2.优雅、简介
3.跨平台
4.较于C++更高级，没有指针等的含义

    Java属于静态语言，Python属于动态语言，Java比较臃肿

5.丰富的库，标准库，第三方库
6.Python面向对象

- 2 ------------------------------------------------------------
1.Simple is better than complex
  Now is better than never. 
         Athough never is often better than right now.
2.易于上手，难于精通
3.既有动态脚本的特性，由于面向对象的特性
    Java、C#会有编译过程，Python是动态解析，不需要定义类型等
    现有动态语言对面向对象支持不好，
    
- 3 ------------------------------------------------------------
缺点：
1.慢
    相对于C/C++/Java
    Why：编译型VS解释型 C/C++ VS JavaScript/Python
    预先编译为机器码 VS 解释执行，故慢
    运行效率要求高->编译型    上层应用->解释型
    另类：Java和C#
    编译为非机器码的中间代码
    开发效率 VS 执行效率  开发越简单可能运行效率就低    
- 4 ------------------------------------------------------------
误区：
1.视野不要局限
- 5 ----------------------------------------------------------
能干什么：
    爬虫 资源聚合等
    大数据与数据分析 Spark支持
    自动化运维与测试 工具特性 宕机时自动容灾处理等等
    Web开发：Flask、Django
    机器学习：TensorFlow支持python
    胶水语言：混合编程，混合C/C++更容易
    
- 6 ----------------------------------------------------------
课程特点：
    基础语法
    Pythonic思想
    高性能代码+优化
    数据结构，实现一些常见数据结构，扎实的编程功底
    
    框架太多，类库太多，迷失技术，基础不牢
    
--------------------- 第二章 ------------------------------
直接使用Python3即可，支持已足够好
Windows下python安装
Python3.5以上不支持XP